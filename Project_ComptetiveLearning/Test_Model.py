from ProjectUtil import *
from CompetetiveLearning import *
from Constants import *
import numpy as np

# ------------------------layer 1 dynamics-------------------------#

data, labels = data_load_mnist(DIGITS)
data = (data.T / (data.T).sum(axis=0)).T

inarr = []
tarr = []

start = 0#data.shape[0] - 50
for index in range(start, start + NumOfDigitsTest):
    print "Label : {0}".format(labels[index - start])
    ret = np.array(np.nonzero(data[index - start].reshape(28, 28))).T
    indicesArray = np.array(ret[:, 0])
    timeArray = np.array(ret[:, 1]) + ((index - start) * DIGIT_DURATION / ms)
    inarr.extend(indicesArray)
    tarr.extend(timeArray)

P1st = SpikeGeneratorGroup(M, inarr, tarr * ms)

# ------------------------layer 2 dynamics-------------------------#

P2nd = NeuronGroup(N/ K_VALUE, CLEquations, threshold=threshold, reset=reset, refractory = refractory,
                   method = method)

# --------------------connecting layer 1 and layer 2-------------------#
syn12 = Synapses(P1st, P2nd, on_pre=Syn12Condition)
syn12.connect("i/K_VALUE == j")


# ------------------------layer 3/op dynamics-------------------------#


P3rd = NeuronGroup(NUM_OUTPUT_CLASSES, CLEquations, threshold=threshold, reset=reset, refractory = refractory,
                   method = method)

syn23 = Synapses(P2nd, P3rd, '''w : 1
                        ''',
               on_pre='''isyn += 100 * w * nA
                        ''')


syn23.connect()

# syn23.w = [0.008, 0.008, 0.041, 0.028, 0.033, 0.070, 0.109, 0.137, 0.158, 0.155, 0.132, 0.105, 0.008, 0.008,
# 0.009, 0.010, 0.062, 0.147, 0.100, 0.034, 0.026, 0.051, 0.147, 0.190, 0.142, 0.063, 0.009, 0.009,
# 0.009, 0.009, 0.130, 0.190, 0.083, 0.045, 0.076, 0.062, 0.018, 0.026, 0.122, 0.186, 0.033, 0.010,
# 0.010, 0.010, 0.010, 0.028, 0.082, 0.138, 0.187, 0.208, 0.159, 0.055, 0.036, 0.038, 0.029, 0.010,
# 0.008, 0.008, 0.020, 0.065, 0.092, 0.117, 0.137, 0.152, 0.051, 0.105, 0.144, 0.088, 0.008, 0.008,
# 0.009, 0.033, 0.051, 0.043, 0.051, 0.071, 0.132, 0.165, 0.171, 0.151, 0.097, 0.011, 0.009, 0.009,
# 0.010, 0.010, 0.010, 0.079, 0.199, 0.114, 0.069, 0.045, 0.051, 0.044, 0.066, 0.091, 0.151, 0.063,
# 0.006, 0.006, 0.032, 0.084, 0.114, 0.127, 0.113, 0.055, 0.089, 0.113, 0.113, 0.112, 0.029, 0.006,
# 0.008, 0.008, 0.008, 0.059, 0.133, 0.154, 0.152, 0.155, 0.052, 0.027, 0.041, 0.072, 0.124, 0.008,
# 0.008, 0.008, 0.021, 0.047, 0.083, 0.092, 0.122, 0.126, 0.114, 0.146, 0.156, 0.061, 0.008, 0.008]

#syn23.w = [ 1.83606481, 1.03416515, 1.03180659, 1.03180002, 1.0318 , 1.0318 , 1.0318 , 1.0318 , 1.0318 , 1.0318 , 1.83276481, 1.03086515, 1.02850659, 1.04851821, 1.02855582, 1.02850016, 1.0285 , 1.06453128, 1.02860046, 1.02850028, 11.05633573, 1.10235201, 1.03613349, 1.09192227, 1.07798331, 1.00217427, 1.05076276, 1.09897228, 0.99728432, 1.07991354, 30.48572451, 1.18457116, 1.00412685, 1.17807888, 1.21994492, 1.05840517, 1.10503875, 1.01924334, 0.97211134, 1.19473062, 35.40088633, 1.2043063 , 0.98635986, 1.14620578, 1.14870716, 1.05230279, 1.14276333, 0.97208014, 1.15793419, 1.10130679, 31.11176877, 1.21226209, 1.00254198, 1.08092322, 1.04660394, 1.10258587, 1.05666484, 1.01884142, 1.19564282, 1.12289721, 25.25828602, 1.15916159, 0.99491419, 1.02606572, 1.11088126, 1.14388117, 1.02984138, 1.14496822, 1.09925877, 1.07760178, 22.32505366, 1.09565317, 0.97984497, 1.06643701, 1.11709559, 1.23214951, 1.05841272, 1.20109542, 1.02874465, 1.04340446, 21.45871203, 1.13613469, 0.99324185, 1.22055032, 1.0275903 , 1.18991297, 1.03626299, 1.18199802, 1.02374178, 1.06955113, 28.26973621, 1.13819713, 1.03782343, 1.27037951, 1.02289464, 1.04798382, 1.08366752, 1.19726139, 1.01782779, 1.0801844 , 41.32614477, 1.21945787, 0.9961476 , 1.18075172, 1.14753377, 0.96929198, 1.15514486, 1.13397995, 0.99750125, 1.07825459, 33.31947167, 1.20140452, 1.00933844, 1.0435108 , 1.18366155, 0.99633338, 1.06482975, 1.00640524, 1.01570052, 1.13554925, 6.24580223, 1.0377291 , 1.01296923, 1.02330612, 1.07047605, 1.01821702, 1.03253768, 1.01295475, 1.07197716, 1.06172787, 1.83546492, 1.03356516, 1.03120659, 1.03120002, 1.0312 , 1.0312 , 1.0312 , 1.0312 , 1.0400122 , 1.03122457]
syn23.w = [ -1.13563274e-26,  -2.07526462e-26,  -1.32351893e-09,
        -1.06431006e-09,  -1.31848147e-09,   5.24632682e-11,
        -2.83498355e-10,   8.66261162e-11,   1.27911357e-09,
         1.57944746e-10,   2.35809644e-12,   7.60882284e-14,
         6.68621068e-10,  -2.49686059e-09,  -3.02859787e-10,
         9.89870398e-11,  -9.77206836e-10,  -2.37112616e-10,
         6.37513812e-10,   1.89633264e-09,   4.78074696e-10,
         7.08855721e-10,  -7.18592218e-10,   2.30598436e-09,
        -2.10460739e-09,  -2.20910852e-09,   1.54372907e-09,
        -6.62048127e-10,   1.16658706e-09,  -1.65237642e-09,
         7.24285048e-10,   7.48442471e-10,   1.76124354e-09,
        -1.24137370e-09,  -2.28122237e-09,   1.26994312e-09,
        -1.37782454e-09,  -2.88926356e-10,  -1.75891674e-09,
        -1.76606925e-09,   7.66689901e-10,   7.43503041e-10,
        -2.64728492e-10,  -2.06078083e-10,  -6.15372256e-11,
        -6.53479655e-10,  -1.56715748e-09,   1.68136039e-10,
         1.71612906e-09,  -1.38654194e-09,   7.64406202e-10,
         7.43688162e-10,  -5.42729799e-10,   1.00277593e-09,
         1.78978013e-09,   7.97129240e-10,  -6.89377051e-10,
        -1.79073496e-09,   2.49300984e-09,   1.53709792e-09,
         7.81374354e-10,   7.51266331e-10,  -8.45593097e-10,
         9.55049705e-10,   1.54562787e-09,  -2.02245668e-09,
        -3.12070410e-10,  -1.02345693e-09,   1.35107735e-09,
         2.13005935e-09,   8.15711159e-10,   7.56787254e-10,
         2.37427848e-09,   1.38574408e-09,   1.33188102e-09,
        -1.50735107e-09,  -5.37456198e-10,   1.86233135e-09,
        -1.78591547e-09,  -5.96875147e-10,   8.08354478e-10,
         7.56191878e-10,   7.80294941e-11,  -1.01017913e-09,
         1.47252573e-09,   2.39174483e-09,  -7.32736441e-11,
        -4.79083072e-10,  -7.97090541e-10,   1.92522240e-09,
         7.17886219e-10,   7.41628898e-10,   9.80847824e-10,
        -1.43164807e-09,   2.05737572e-09,  -2.00985037e-11,
         2.38783690e-09,   9.09457639e-10,   8.95418436e-10,
        -2.05680271e-09,   6.93676728e-10,   7.44142052e-10,
        -2.41785584e-09,  -7.92563563e-10,  -1.84111239e-09,
         2.13135226e-09,  -2.08424344e-09,  -8.61300861e-10,
        -4.22054358e-10,   2.23359360e-09,   6.77146231e-10,
         7.18445844e-10,  -2.44610985e-09,  -1.75208599e-10,
         1.25535778e-10,   1.53903306e-09,   3.56469213e-10,
        -1.79258674e-09,   2.26894598e-09,   1.16115862e-11,
         3.37158450e-10,   1.99896648e-11,  -2.33390495e-09,
        -2.15628697e-10,  -4.06371086e-10,  -4.51994988e-10,
        -2.05636319e-09,   8.32879909e-10,   1.62886653e-09,
         4.51955134e-11,   2.88192984e-20,   1.74528152e-21,
         1.03483365e-09,   1.40972628e-09,  -1.17307243e-09,
        -7.49446791e-10,  -1.47738863e-09,   1.74602310e-09,
        -2.39777051e-09,   2.40997874e-09]

v_mon = getStateMonitor(P3rd)['voltage']
isyn_mon = getStateMonitor(P3rd)['current']
s_mon = getSpikeMonitor(P3rd)

run(DIGIT_DURATION*NumOfDigitsTest)

print "Test Error  : {0}".format(getError(s_mon, labels, 1))
figure(figsize=(6,4))
plot(s_mon.t/ms, s_mon.i, '.k')
xlabel('Time (ms)')
ylabel('Neuron index')
ylim([-1,len(P1st)+1])
tight_layout()

figure(figsize=(9, 9))
ax = axes()

ax2 = ax.twinx()
ax2.plot(isyn_mon.t / ms, isyn_mon.isyn[0], 'b', linewidth=3, alpha=.4)
ax2.set_xlabel('Time (ms)')
ax2.set_ylabel('Synaptic Current')
tight_layout()
show()